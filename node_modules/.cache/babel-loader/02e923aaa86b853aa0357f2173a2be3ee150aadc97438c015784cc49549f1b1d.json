{"ast":null,"code":"var _jsxFileName = \"/home/kelvin/Desktop/Dograting/Dograting/src/components/Doglist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Doglist = () => {\n  _s();\n  const [dogs, setDogs] = useState([]);\n  const getDogs = async () => {\n    try {\n      const response = await fetch(\"https://dog.ceo/api/breeds/list/all\");\n      if (!response.ok) {\n        throw new Error('Failed to fetch dogs');\n      }\n      const data = await response.json();\n      // Extract the list of dog breeds from the response\n      const breeds = Object.keys(data.message);\n\n      // Fetch a random image for each breed\n      const dogsData = await Promise.all(breeds.map(async breed => {\n        try {\n          const imageResponse = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n          if (!imageResponse.ok) {\n            throw new Error(`Failed to fetch image for ${breed}`);\n          }\n          const imageData = await imageResponse.json();\n          return {\n            name: breed,\n            image: imageData.message\n          };\n        } catch (error) {\n          console.error(`Error fetching image for ${breed}:`, error);\n          return {\n            name: breed,\n            image: null // Set image to null if fetching fails\n          };\n        }\n      }));\n      setDogs(dogsData);\n    } catch (error) {\n      console.error('Error fetching dogs:', error);\n    }\n  };\n  useEffect(() => {\n    getDogs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: dogs.map((dog, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card_item\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: dog.image,\n          alt: dog.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dogName\",\n          children: dog.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"seeMore\",\n          children: \"See More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(Doglist, \"pSBGSKa0uqsDjyjGPBMjPOVWgI8=\");\n_c = Doglist;\nexport default Doglist;\nvar _c;\n$RefreshReg$(_c, \"Doglist\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Doglist","_s","dogs","setDogs","getDogs","response","fetch","ok","Error","data","json","breeds","Object","keys","message","dogsData","Promise","all","map","breed","imageResponse","imageData","name","image","error","console","className","children","dog","index","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kelvin/Desktop/Dograting/Dograting/src/components/Doglist.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Doglist = () => {\n    const [dogs, setDogs] = useState([]);\n\n    const getDogs = async () => {\n        try {\n            const response = await fetch(\"https://dog.ceo/api/breeds/list/all\");\n            if (!response.ok) {\n                throw new Error('Failed to fetch dogs');\n            }\n            const data = await response.json();\n            // Extract the list of dog breeds from the response\n            const breeds = Object.keys(data.message);\n    \n            // Fetch a random image for each breed\n            const dogsData = await Promise.all(breeds.map(async (breed) => {\n                try {\n                    const imageResponse = await fetch(`https://dog.ceo/api/breed/${breed}/images/random`);\n                    if (!imageResponse.ok) {\n                        throw new Error(`Failed to fetch image for ${breed}`);\n                    }\n                    const imageData = await imageResponse.json();\n                    return {\n                        name: breed,\n                        image: imageData.message\n                    };\n                } catch (error) {\n                    console.error(`Error fetching image for ${breed}:`, error);\n                    return {\n                        name: breed,\n                        image: null // Set image to null if fetching fails\n                    };\n                }\n            }));\n    \n            setDogs(dogsData);\n        } catch (error) {\n            console.error('Error fetching dogs:', error);\n        }\n    }\n    \n    useEffect(() => {\n        getDogs();\n    }, []);\n\n    return (\n        <div className=\"container\">\n            {dogs.map((dog, index) => (\n                <div className=\"card_item\" key={index}>\n                    <div className=\"card_inner\">\n                        {/* Assuming there is an image property for each dog */}\n                        <img src={dog.image} alt={dog.name} />\n                        <div className=\"dogName\">{dog.name}</div>\n                        {/* You can add more details based on the API response */}\n                        {/* For example: dog.breed, dog.temperament, etc. */}\n                        <button className=\"seeMore\">See More</button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Doglist;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}